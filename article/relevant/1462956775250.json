{"relevantArticles":[{"articleTitle":"你保存用户密码的姿势正确吗？","articleAbstractText":"这几年陆陆续续有很多大站被脱裤，最终导致了很多用户的密码明文泄露。本文不探讨脱裤技术，主要研究的是如何正确（尽量安全）地保存用户密码。","articleStatus":0,"articlePermalink":"/secure-salted-password-hashing","articleImg1URL":"https://img.hacpai.com/bing/20180313.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Windows 通过命令行安装根证书","articleAbstractText":"背景 有的时候我们需要在用户机器上将自制的 CA 证书安装到\u201c受信任的根证书颁发机构\u201d下，这样就能使用该 CA 颁发自签名的证书了，以便后续完成一些安全相关的操作。 工具 在命令行安装证书需要用到证书管理器 certmgr.exe，这个二进制可执行文件在 Win10 中 大概 这个路径下，C:\\Program Files (x86)\\Windows Kits\\8.1\\bin\\x86\\certmgr.exe，建议把这个二进制打在程序的发布包中，或者让程序从网络上拉取到本地。 不带参直接运行的话会弹出一个简单的图形界面： 另外，还有个证书管理器 certmgr.msc，看上去功能更多一些，不过这个是纯图形界面的： certmgr.exe 可以通过该工具实现证书的管理操作： D:&amp;gt;certmgr.exe /? Usage: CertMgr [options][-s [-r &lt;location&gt;][SourceStoreName] [-s [-r &lt;location&gt;][DestinationStoreName] Options: -add Add cer....","articleStatus":0,"articlePermalink":"/articles/2018/05/03/1525333052172.html","articleImg1URL":"https://img.hacpai.com/bing/20180413.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"呼叫中心架构设计","articleAbstractText":"从呼叫模式上看，目前业界大多数采用的是\u201c回拨\u201d模式，即由呼叫中心发起两路呼叫，然后将两路进行连通。","articleStatus":0,"articlePermalink":"/articles/2016/07/24/1469349167953.html","articleImg1URL":"https://img.hacpai.com/bing/20180412.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"最近的被攻击记录","articleAbstractText":"最近几天黑客派一直在被 CC 攻击，目前是通过 IP 限制暂时解决。 从攻击客户端的 User-Agent 来看，对方的攻击手段大致是通过公有站点检查服务+肉鸡进行 CC。不过 UA 不一定准确，可能是伪造的，仅提供作为参考。 User-Agent IP 个数 Mozilla/4.0 (compatible;HostTracker/2.0;+http://www.host-tracker.com/) 90 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; cdnunion_monitor;) 130 Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/62.0.3183.0 Safari/537.36 400 Mozilla/4.0 900 下面的附件是截至到今早的攻击请求日志，已经进行了 IP 去重。攻击地区主要是中国和美国，大家可以搜索一下自己的 IP 是否出现在日志中，以便做出相应的....","articleStatus":0,"articlePermalink":"/articles/2019/02/18/1550460506963.html","articleImg1URL":"https://img.hacpai.com/bing/20180912.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"使用 NGINX 流控和 fail2ban 防止 CC 攻击","articleAbstractText":"背景知识 CC 攻击 攻击者通过创建大量请求导致服务器资源耗尽，主要针对特定服务接口，属于实现 DoS 攻击的一种方式（DoS 攻击更多是针对网络端口，而不是具体服务接口）。 NGINX 流控  limit_req_zone：通过\u201c漏桶\u201d算法限制每个 IP 发起的请求频率。limit_conn_zone：限制每个 IP 发起的连接数。 fail2ban 通过匹配服务器日志操作 iptables 来限制客户端网络连接。 实践配置 NGINX 部分 在 http 部分中配置： limit_req_zone $binary_remote_addr zone=sym:10m rate=5r/s; limit_conn_zone $binary_remote_addr zone=conn_sym:10m;然后在需要流控的 location 部分配置： limit_req zone=sym burst=5; limit_conn conn_sym 10;重启 NGINX 后当有超流客户端请求时将在 NGINX error.log（默认在 /var/log/nginx/error.log） 中看到类....","articleStatus":0,"articlePermalink":"/articles/2017/02/13/1486915389413.html","articleImg1URL":"https://img.hacpai.com/bing/20190121.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"标签服务实现漫谈","articleAbstractText":"标签服务是一个较为通用的基础业务服务，比如博客系统对文章加标签、社交网络中为好友添加印象、收藏的歌曲贴标签方便整理等等。 其主要提供两类接口： 标签实体的管理/查询：负责标签实体的 CRUD 标签关联的管理/查询：将外部业务实体与标签建立/删除关联，根据外部业务实体 id 查询标签集 RDB 实现 基于关系型数据库的实现是最容易的，并且上大多数应用也是这样做的。 建立 tag 表，其中包含了 tag 的基础属性，例如 name、description 等 建立 tag_rel 关联表，其中主要包含了 object_id、tag_id 管理服务（创建/更新/删除）的实现非常容易；根据 object_id 查询其对应的标签集也很容易实现： SELECT tag_rel.tag_id, tag_rel.object_id, tag.name FROM tag_rel LEFT JOIN tag ON tag_rel.tag_id = tag.tag_id WHERE tag_rel.object_id = '2db775c1d2174a8c67fc39b86c3fc168' 问题 ....","articleStatus":0,"articlePermalink":"/articles/2015/12/01/1448958541321.html","articleImg1URL":"https://img.hacpai.com/bing/20180321.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"基于数据库复制的技术架构讨论","articleAbstractText":"背景 这里的数据库复制指的是将 主 业务数据库实例上的库通过同步机制（比如 MySQL binlog）准实时（比如最大延迟为 3s）复制到其他数据库实例上，这些实例库只做查询，不做数据写入。 这套架构设计的主要优势： * 各业务应用能够方便地在自己的 DB 实例上进行业务查询，比如通过 join 主业务库 * 在不明确业务边界、没有梳理好业务对应技术模块时可以最小成本进行变更或扩展 * 实现读写分离，提升性能 ### 一些问题 实际在实施过程中主要遇到两个问题： 1. 不可能实时完成数据同步，将造成业务上面的不一致，比如调用主库服务更新数据后，在业务库上不能实时查询到已更新的数据 2. 很难保证高可用（在使用阿里 DTS 时出现过多次问题，自己做主从可能会好一些） 为了满足业务发展，复制库的数量会逐步增多（比如新开一个产品可能就需要多复制一套库），以上两个问题可能会导致严重的故障， [CAP] 不能兼得。 ### 服务化 基于数据库复制架构的核心理念是将数据源暴露给应用，开发者直接针对数据源进行开发，是一种非常直接的方式。 但随着业务的逐渐清晰，一些业务逻辑是可以抽....","articleStatus":0,"articlePermalink":"/articles/2016/06/07/1465278948107.html","articleImg1URL":"https://img.hacpai.com/bing/20180929.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}