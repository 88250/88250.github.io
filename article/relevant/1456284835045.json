{"relevantArticles":[{"articleTitle":"模板引擎实现（一）词法分析","articleAbstractText":"如果你想实现模版引擎、编译器前端、文本解析器（比如 Markdown ）或想要了解它们的实现原理，请一定不要错过本系列的文章 :grin: 模板引擎实现（一）词法分析 另外，* 本系列的文章面向的是撸起袖子就开干的朋友，所以不会介绍基础理论，比如 DFA/NFA，算法复杂度等（确切的说是没法介绍理论，因为作者能力有限 :joy:）* 在使用到的术语/定义方面作者是认真查过资料并再三斟酌的，不会出现胡编乱造，请放心理解和使用 :white_check_mark:* 本系列文章的对应项目是 freemarker.go（FreeMarker 的 golang 实现），欢迎大家关注点赞 :star2: 本文介绍了词法分析的基本概念，主要参考 golang 的 text/template/parse 包源码进行解析。 词法分析 将面向源码的字符流转成 token 流的过程是词法分析。用\u201c流\u201d来描述主要说明了处理过程是有序和连续的。比如读取源码文件时是一个字符一个字符读取的，生成的 token 也是一个接一个的。 当我们在源码中看到 scanner、lex/le....","articleStatus":0,"articlePermalink":"/articles/2017/05/31/1496233258522.html","articleImg1URL":"https://img.hacpai.com/bing/20190214.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"最近的被攻击记录","articleAbstractText":"最近几天黑客派一直在被 CC 攻击，目前是通过 IP 限制暂时解决。 从攻击客户端的 User-Agent 来看，对方的攻击手段大致是通过公有站点检查服务+肉鸡进行 CC。不过 UA 不一定准确，可能是伪造的，仅提供作为参考。 User-Agent IP 个数 Mozilla/4.0 (compatible;HostTracker/2.0;+http://www.host-tracker.com/) 90 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; cdnunion_monitor;) 130 Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/62.0.3183.0 Safari/537.36 400 Mozilla/4.0 900 下面的附件是截至到今早的攻击请求日志，已经进行了 IP 去重。攻击地区主要是中国和美国，大家可以搜索一下自己的 IP 是否出现在日志中，以便做出相应的....","articleStatus":0,"articlePermalink":"/articles/2019/02/18/1550460506963.html","articleImg1URL":"https://img.hacpai.com/bing/20180912.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Go 边看边练 -《Go 学习笔记》系列（十三）","articleAbstractText":"上一篇： [1438845728987] ---- ### ToC * Go 边看边练 -《Go 学习笔记》系列（一）- 变量、常量 * Go 边看边练 -《Go 学习笔记》系列（二）- 类型、字符串 * Go 边看边练 -《Go 学习笔记》系列（三）- 指针 * Go 边看边练 -《Go 学习笔记》系列（四）- 控制流1 * Go 边看边练 -《Go 学习笔记》系列（五）- 控制流2 * [Go 边看边练 -《Go 学习笔记》系列（六）- 函数](http://symphony.b3....","articleStatus":0,"articlePermalink":"/articles/2015/08/07/1438938175118.html","articleImg1URL":"https://img.hacpai.com/bing/20180918.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Windows 通过命令行安装根证书","articleAbstractText":"背景 有的时候我们需要在用户机器上将自制的 CA 证书安装到\u201c受信任的根证书颁发机构\u201d下，这样就能使用该 CA 颁发自签名的证书了，以便后续完成一些安全相关的操作。 工具 在命令行安装证书需要用到证书管理器 certmgr.exe，这个二进制可执行文件在 Win10 中 大概 这个路径下，C:\\Program Files (x86)\\Windows Kits\\8.1\\bin\\x86\\certmgr.exe，建议把这个二进制打在程序的发布包中，或者让程序从网络上拉取到本地。 不带参直接运行的话会弹出一个简单的图形界面： 另外，还有个证书管理器 certmgr.msc，看上去功能更多一些，不过这个是纯图形界面的： certmgr.exe 可以通过该工具实现证书的管理操作： D:&amp;gt;certmgr.exe /? Usage: CertMgr [options][-s [-r &lt;location&gt;][SourceStoreName] [-s [-r &lt;location&gt;][DestinationStoreName] Options: -add Add cer....","articleStatus":0,"articlePermalink":"/articles/2018/05/03/1525333052172.html","articleImg1URL":"https://img.hacpai.com/bing/20180413.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"理解 HTTPS 原理，SSL/TLS 协议","articleAbstractText":"###为什么要使用 HTTPS 当我们使用 HTTP 协议时，传输的数据是不安全的，因为所有在客户端和服务端往来的数据都是明文： * 第三方可以获取到真实数据 * 第三方可以篡改数据 * 第三方可以冒充服务端或客户端 为了解决这些问题，需要在 HTTP 协议中加入一个安全机制，由此并产生了 HTTPS，我们可以认为 HTTPS = HTTP + TLS/SSL。TLS/SSL 的引入解决了安全问题，而上层应用协议还是 HTTP。 ###历史 SSL（Secure Sockets Layer）中文称作\u201c安全套接层\u201d，TLS（Transport Layer Security），中文称作\u201c传输层安全协议\u201d。 1. 1994 年，网景（NetScape）公司设计了 SSL 1.0 2. 1995 年，SSL 2.0，存在严重漏洞 3. 1996 年，SSL 3.0，得到大规模应用 4. 1999 年，IETF 对 SSL 进行标准化，发布了 TLS 1.0 5. 2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.1 和 TLS 1.2 在应用层，我们习惯将两者并称 TL....","articleStatus":0,"articlePermalink":"/articles/2015/11/19/1447920990604.html","articleImg1URL":"https://img.hacpai.com/bing/20181104.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Go 边看边练 -《Go 学习笔记》系列（十四）（已完结）","articleAbstractText":"上一篇： [1438938175118] ---- ### ToC * Go 边看边练 -《Go 学习笔记》系列（一）- 变量、常量 * Go 边看边练 -《Go 学习笔记》系列（二）- 类型、字符串 * Go 边看边练 -《Go 学习笔记》系列（三）- 指针 * Go 边看边练 -《Go 学习笔记》系列（四）- 控制流1 * Go 边看边练 -《Go 学习笔记》系列（五）- 控制流2 * [Go 边看边练 -《Go 学习笔记》系列（六）- 函数](http://symphony.b3....","articleStatus":0,"articlePermalink":"/articles/2015/08/10/1439194647152.html","articleImg1URL":"https://img.hacpai.com/bing/20181207.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"使用 NGINX 流控和 fail2ban 防止 CC 攻击","articleAbstractText":"背景知识 CC 攻击 攻击者通过创建大量请求导致服务器资源耗尽，主要针对特定服务接口，属于实现 DoS 攻击的一种方式（DoS 攻击更多是针对网络端口，而不是具体服务接口）。 NGINX 流控  limit_req_zone：通过\u201c漏桶\u201d算法限制每个 IP 发起的请求频率。limit_conn_zone：限制每个 IP 发起的连接数。 fail2ban 通过匹配服务器日志操作 iptables 来限制客户端网络连接。 实践配置 NGINX 部分 在 http 部分中配置： limit_req_zone $binary_remote_addr zone=sym:10m rate=5r/s; limit_conn_zone $binary_remote_addr zone=conn_sym:10m;然后在需要流控的 location 部分配置： limit_req zone=sym burst=5; limit_conn conn_sym 10;重启 NGINX 后当有超流客户端请求时将在 NGINX error.log（默认在 /var/log/nginx/error.log） 中看到类....","articleStatus":0,"articlePermalink":"/articles/2017/02/13/1486915389413.html","articleImg1URL":"https://img.hacpai.com/bing/20190121.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}