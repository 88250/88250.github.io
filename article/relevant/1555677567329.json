{"relevantArticles":[{"articleTitle":"Solo 从设计到实现后记","articleAbstractText":"本文是《Solo 从设计到实现》的一个章节，该系列文章将介绍 Solo 这款 Java 博客系统是如何从无到有的，希望大家能通过它对 Solo 从设计到实现有个直观地了解、能为想参与贡献的人介绍清楚项目，也希望能为给重复发明重新定义博客系统的人做个参考 ❤️ 轮子和时间 \u201c不要重复发明轮子\u201d在程序员界的流行应该是从 Rod 发明 Spring 开始。他曾经在其著作《Without EJB》中使用了这个谚语，并阐述了 Spring 的诞生基于这一理念。 重复发明轮子最大的问题在于浪费时间。作为作者，浪费时间重复劳动；作为用户，浪费时间尝试。一个不好的轮子会严重浪费大家的时间，所以\u201c不要重复发明轮子\u201d主要针对的是那些不够圆的轮子而言。 新轮子肯定不会很圆。要么是设计问题，要么是工艺问题。设计问题最好在设计阶段就确认好，工艺问题可以花时间解决。 我觉得只要大家有时间，就尽可能发明轮子吧。无论是产品层面的优化改进，还是框架技术层面的创新尝试，我觉得都是值得的。作为普通程序员，浪费一些时间并没有什么大不了的，相信勇于尝试并坚持下去，一定能够改变一些事情的。 成功的开源 什么是成功 一个开源项目.....","articleStatus":0,"articlePermalink":"/articles/2020/02/08/1581145208243.html","articleImg1URL":"https://img.hacpai.com/bing/20190323.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"开源经验谈","articleAbstractText":"Bootstrap 古话说得好：\u201c万事开头难\u201d。 开头在本质上是解决 \u201cBootstrapping\u201d，人们一直使用这个比喻来描述解决启动问题的方法，即一个人试图用自己的鞋带将自己拉起来。比如按下电脑开机按钮后初始化系统被广泛称作自举引导（简称 booting）。 想做好一个开源项目，就先得规划一个好的启动方式。 GitHub 10 多年前做开源项目托管的话基本只有一个选择，那就是 SourceForge。期间也有过一些其他大厂的项目托管服务，比如 Google Code，Sun/Oracle 的 Project Kenai，现在都停服了。目前 GitHub 已然是全球最大的开源项目托管服务商了，促成这样现状的最大原因有这几个方面吧： git 版本控制系统的流行，并做了一些更简单的工作流，比如 Pull Request更好、更现代化的用户体验，比如 issue comments 的实时推送 API 开放平台，构建第三方应用的生态系统持续不断的改进，GitHub 隔三差五会有一些细节改进，并且桌面客户端工具也在不断演进 目前 GitHub 是开源项目托管的不二之选。国内也有类 GitHu.....","articleStatus":0,"articlePermalink":"/articles/2017/08/01/1501603146956.html","articleImg1URL":"https://img.hacpai.com/bing/20180912.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"2017 成为报废程序员的前一年","articleAbstractText":"工作 离开房星 2017 年春节后我便匆匆离开了房星，刚拿完年终奖金就撤了实在有愧。不过现在也只能在这里说说罢了，希望以后还有机会能够和房星的伙伴们合作。 长假 2 月份我和 V 放了个长假，爬了座雪山、重游黄山和杭州，还有和网友 R 见面。还好 V 把这些经历都记录下来了，不然现在没得吹了： 时隔十年再游轿子雪山黄山 - 杭州五日游记 加入国资商城 3 月份加入了国资商城，参与 Java RPC 框架的开发，这是一个基于 Facebook Swift 以及 Netflix Ribbon 的 RPC 框架，主要优势是通过 Thrift/Netty 获得跨平台、高性能以及少侵入。我做的这边是胶水代码，将 Spring、Swift 和 Ribbon 进行整合，干货是 C# 端，并且我老大已经将其完全开源。 6 月后开始投入到云平台的实现中，陆续接触了 EMC ScaleIO、GusterFS 以及 SeaweedFS，虽然基于它们做了一些开发，但是始终是入门后皆浅尝辄止。 技术架构师的未来 对技术方面的追求一直没有变，不过今年产生了一个\u201c奇怪\u201d的想法：技术架构师以后会越来越少，因为需求的.....","articleStatus":0,"articlePermalink":"/articles/2017/12/31/1514687638181.html","articleImg1URL":"https://img.hacpai.com/bing/20180523.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"我为什么要用中文写项目文档","articleAbstractText":"English Please 最近 B3log 开源社区下的项目 BND1 以及 30s2 被外国友人 hobolance3 贴了两条建议： English Please - BND4 English Please - 30s5 这两个项目都是中文写的 README。他建议把中文换成英文，这样对外国友人更友好，也能为项目获得更多关注。 What is the problem with Chinese README's What we want How this will help you 结尾引用了 Richard Stallman 的名言： Sharing knowledge is the most fundamental act of friendship. Because it is a way you can give something without loosing something. hobolance 也给其他一些中文项目提过该建议，大部分处理是被直接关闭。因为这些项目和 BND、30s 一样都是面向国内用户的，比如 UnblockNeteaseMusic....","articleStatus":0,"articlePermalink":"/articles/2019/08/19/1566191673842.html","articleImg1URL":"https://img.hacpai.com/bing/20190218.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"2019 用善意面对世界","articleAbstractText":"春夏秋 春、夏、秋。 明年就是《创》的第三年了，也将是最后一年更新该系列了，以后不定时有感随发。 Vditor 今年我和 V 主要精力花在了构建 Vditor 上，我们没有选择基于其他编辑器内核来做，而是从零开始写，包括 Markdown 解析渲染也撸了一遍，整个实现基本没有第三方依赖（除了支持图表、数学公式等）。 对于大部分开发者来说，提供给用户使用的编辑器是能用就凑合着用，因为编辑器候选品不多，自己造轮子的话工作量不小，即使碰到有需要更改的地方也有办法： 通过编辑器本身的扩展机制 在生成的 HTML 上再做处理 直接改编辑器项目源码 办法是有，修修补补也能用。但如果要追求更好的用户体验那就只能自己写一个了。 另外，我们观察到一个现象，比较成功的 UGC 社区都有自己的编辑器。因为内容源是用户创造的，编辑器是否好用会对创作过程产生很大影响，所以编辑器可以说是 UGC 社区的核心之一。 Vditor 起初的定位是 Markdown 编辑器，我们已经在 v1 中达到了业界主流水准，即分屏编辑预览。v2 中我们改变了定位：\u201c所见即所得，支持 Markdown\u201d，这样 Vditor 将更......","articleStatus":0,"articlePermalink":"/articles/2019/12/30/1577712379212.html","articleImg1URL":"https://img.hacpai.com/bing/20180421.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"2018 成为报废程序员的第一年","articleAbstractText":"工作 第一次被裁员 2 月底云南省国资商城宣布裁员，很不幸，我和 @Vanessa 都被裁了，做扶贫的项目结果把员工给做贫了。 不过被裁也不是什么坏事，因为终于可以做自己想做的事情了！3 月份我们 建立了一家公司 \u2014\u2014 云南链滴科技，开启了两个程序员的创业之路。 春夏秋 创业的第一个春天创业的第一个夏天创业的第一个秋天这个冬天还没过完，明年开春前再总结 生活 旅游 7 月份沿大理-丽江-泸沽湖这条线游玩了一番，我发现我已经变成了个吃货，对景点兴趣不大，基本是走到哪里就研究那里有什么好吃的，人活一张嘴。 厨艺和散步 今年我完成了大部分的厨房灶火任务，下厨房这个 APP 还是蛮好用的，它满足了我大部分的需求，但同时我也很好奇它是怎么盈利的。可能是创业带来的影响吧，我最近总会考虑别人的赢利点，也许是潜意识中希望能借此偷来赚钱的点子吧。 每天吃完午饭，只要天气允许，我和 V 会下楼走一圈散个步，不是为了锻炼身体，而是为了讨论活下去的方法。这么说好像有点惨巴巴的，但是我们确实通过\u201c散步讨论法\u201d产出了好几个想做且能做的事情，当然，都是些基本没有把握能赚到钱（甚至是小钱）的事情。 这些事情可能只是.....","articleStatus":0,"articlePermalink":"/articles/2018/12/31/1546225387284.html","articleImg1URL":"https://img.hacpai.com/bing/20180617.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"搭建 GitHub 镜像仓库","articleAbstractText":"需求背景 国内访问 GitHub 仓库实在太慢，项目主要提交者也就我和 V，外加以后打算自己建立仓库，所以决定在新项目上试试。 将 GitHub 仓库作为镜像仓库，主库设在自建的服务器上。这样既能获得 GitHub 协作特性（Issues、PR、Actions、Release 等），开发时又能享受高速提交和拉取。 服务端 创建 Git 用户，配置 git-shell 等，然后配置 SSH 密钥，密钥分为两类： 客户端提交服务端用，修改 ~/.ssh/authorized_keys 服务端自动推送 GitHub，修改 ~/.ssh/id_rsa.pub。GitHub 上需要配置账号 SSH 或者仓库 Deploy Keys 切换到 Git 用户，并在 ~ 下创建仓库 mkdir sample.git &amp;&amp; cd sample.git &amp;&amp; Git clone --bare git@github.com:youraccount/sample.git 在 hooks 目录下创建名为 post-receive 的脚本： #!/bin/sh g....","articleStatus":0,"articlePermalink":"/articles/2020/02/07/1581004860744.html","articleImg1URL":"https://img.hacpai.com/bing/20181018.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}