{"relevantArticles":[{"articleTitle":"以太坊 JavaScript API web3.js 打币","articleAbstractText":"ABI 简介 关于什么是 ABI（Application Binary Interface）请看官网文档。简单来说 ABI 就是外界和合约交互的方式： ABI 用 JSON 描述合约的接口定义用约定好的编码方式进行实际调用 做过 RPC 的同学可以理解为这就是异构平台的 RPC 实现，需要进行接口定义、存根生成、寻址、序列化、网络通讯等步骤就能调用到合约上的函数了。 ABI 的实例请看这里。 web3.js 简介 web3.js 是以太坊 JavaScript API 的官方实现，用它来和以太坊节点进行可编程通讯，基于 HTTP 或 IPC 连接。简单来说 web3.js 就是可以通过 JavaScript 调用本地或远程的以太坊节点，完成网络管理、账户管理、交易等操作。 下面的代码示例基于 web3.js v1.0 开发，请注意不同版本之间的差异。 同步区块 人们都说以太坊发币最大的技术难点就是同步区块，一点儿没错！ 试了 ETHFANS 星火计划提供的静态节点也不行，最后还是放弃本地电脑同步，主要问题是我家这里的网络质量太差，很多时候藕断丝连。 后来在阿里云海外节点开了台服务器几.....","articleStatus":0,"articlePermalink":"/articles/2018/03/09/1520583695227.html","articleImg1URL":"https://img.hacpai.com/bing/20190222.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"以太坊相关中文资料整理","articleAbstractText":"文档 区块链技术指南精通比特币以太坊白皮书中文版以太坊官网文档中文版Solidity 语言Truffle 框架 钱包 Mist：以太坊官方出品imToken：移动端轻钱包，中国团队出品Parity：功能强大，需要同步区块数据MyEtherWallet：Web 版钱包，无需同步区块数据MetaMask：浏览器插件，简单好用 区块浏览 Etherscan：功能丰富，有 APIetherchain.org：功能还比较少，可作为 Etherscan 的备用 网络状态 节点统计网络统计 博客与社区 汪晓明对区块链、以太坊的思考：永远的黄家驹深入浅出区块链区块链技术博客以太坊爱好者社区区块链技术中文社区黑客派：编程大杂烩 欢迎大家加入 B3 币圈 QQ 群： 618817478","articleStatus":0,"articlePermalink":"/articles/2018/01/13/1515820007039.html","articleImg1URL":"https://img.hacpai.com/bing/20180616.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"链书 M1 上线","articleAbstractText":"链书 简介 链书（Chainbook）是 B3log 开源社区提供的区块链纸质书交易平台，通过 B3T 实现共享激励与价值链。 链书主要通过如下组件实现服务： 链书社：微信小程序，扫 ISBN 进行书籍上架、购买书籍、快递预约等业务操作黑客派：链书社服务端，实现账号系统、书籍管理、B3T 转账、社区论坛等B3T：B3log 开源社区币，以太坊 ERC20 令牌 动机 让闲置书籍继续发挥社会价值做一个真实落地的区块链应用为 B3T 赋值，扩大 B3log 开源社区影响力 使用流程 微信登录 如果没有黑客派账号，直接通过链书社小程序登录即可如果已有黑客派账号，需要先到个人设置账号中绑定微信，然后再通过链书社小程序登录 交易书籍 卖家使用小程序扫书 ISBN 并设定 x 个 B3T 上架，标明寄付或到付买家需求下单：冻结买家的 x 个 B3T卖家快递书给买家：通过系统联系快递上门取件进行寄送买家签收后系统将 x 个冻结 B3T 解冻并转账给卖家 在这个交易过程中： 卖家主要成本是发快递的人力时间成本，寄付的话还需要支付快递费，收益是获得 x 个自定价的 B3T买家主要成本是支付 ....","articleStatus":0,"articlePermalink":"/articles/2018/06/21/1529545076617.html","articleImg1URL":"https://img.hacpai.com/bing/20181116.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"搭建 GitHub 镜像仓库","articleAbstractText":"需求背景 国内访问 GitHub 仓库实在太慢，项目主要提交者也就我和 V，外加以后打算自己建立仓库，所以决定在新项目上试试。 将 GitHub 仓库作为镜像仓库，主库设在自建的服务器上。这样既能获得 GitHub 协作特性（Issues、PR、Actions、Release 等），开发时又能享受高速提交和拉取。 服务端 创建 Git 用户，配置 git-shell 等，然后配置 SSH 密钥，密钥分为两类： 客户端提交服务端用，修改 ~/.ssh/authorized_keys 服务端自动推送 GitHub，修改 ~/.ssh/id_rsa.pub。GitHub 上需要配置账号 SSH 或者仓库 Deploy Keys 切换到 Git 用户，并在 ~ 下创建仓库 mkdir sample.git &amp;&amp; cd sample.git &amp;&amp; Git clone --bare git@github.com:youraccount/sample.git 在 hooks 目录下创建名为 post-receive 的脚本： #!/bin/sh g....","articleStatus":0,"articlePermalink":"/articles/2020/02/07/1581004860744.html","articleImg1URL":"https://img.hacpai.com/bing/20181018.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}