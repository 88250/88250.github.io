{"relevantArticles":[{"articleTitle":"Docker 初探","articleAbstractText":"开始学习使用 Docker，本文介绍了 Docker 重要的概念和常用的命令。","articleStatus":0,"articlePermalink":"/docker-first-step","articleImg1URL":"https://img.hacpai.com/bing/20171106.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"如何限制 docker run 容器执行时长？","articleAbstractText":"需求背景 有的时候我们需要跑一些不一定安全（不受信任）的程序时，可以通过 docker 实现资源隔离，其执行时长也需要控制，如果执行时间太长就终止运行。 Docker 本身是否支持超时控制 从 2013 年开始每隔一段时间都有人呼吁 docker 官方来实现这个特性，但官方并不打算实现。 具体讨论细节请看 https://github.com/moby/moby/issues/1905 。 错误的方案 以上讨论中以及其他地方陆续有人提出\u201c外围\u201d解决方案，其中有两种常见的错误方案值得我们注意。 kill docker run timeout 3 docker run ... untrusted_program docker run 本身是一个 docker client 派生的进程，使用 kill docker run 进程来终止容器进程运行（比如通过 Linux 命令 timeout 或者类似发送 kill 到 docker run 进程）的方案都可能会有问题，导致容器进程无法终止。主要原因是： docker run 这个进程不一定能及时响应信号，即使响应了信号，也不一定能传到容器......","articleStatus":0,"articlePermalink":"/articles/2019/05/19/1558229770509.html","articleImg1URL":"https://img.hacpai.com/bing/20190107.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"使用 Golang 操作 Linux Namespaces","articleAbstractText":"Linux Namespaces（Linux 命名空间）机制提供了进程使用操作系统资源时的隔离方式，是基于内核实现轻量级虚拟化（容器化，例如 docker）的实现基础。 具体来说就是当我们创建一个进程时，可以给进程设置 flag 组合来构建进程的命名空间，处于不同命名空间的进程是相互隔离的。","articleStatus":0,"articlePermalink":"/golang-linux-namespaces","articleImg1URL":"https://img.hacpai.com/bing/20180909.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"OpenShift 技术架构概述","articleAbstractText":"OpenShift 让用户可以创建、部署、管理云端应用，其云环境具体提供了磁盘空间、CPU 计算资源、内存资源、网络连接以及应用服务器。根据不同应用类型（数据库、编程语言等），OpenShift 会提供不同的文件系统布局（例如 PHP、Python、Ruby、Java）来创建不同的运行环境。此外，OpenShift 也提供了一定程度的 DNS（域别名）。","articleStatus":0,"articlePermalink":"/openshift-tech-architecture-overview","articleImg1URL":"https://img.hacpai.com/bing/20180523.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Go 编译跨平台","articleAbstractText":"适用于 [Linux]，拷贝代码后新建文件 cross.bash，并在 ${go 安装路径}/src 目录下执行。","articleStatus":0,"articlePermalink":"/compile-go-cross-platform","articleImg1URL":"https://img.hacpai.com/bing/20181230.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Solo 的 golang 版计划","articleAbstractText":"Solo.go Solo 经过多年众多用户的使用、反馈和开发迭代，目前从功能上和实现上都比较稳定了，我和 @Vanessa 都觉得是时候将 Solo 推入维护阶段了，后续只做必要的缺陷修复。 另外，我们打算用 golang 实现一个 Solo.go（代号），并在 Solo v2.5.0 中提供 JSON 格式的数据导出功能，以便 Solo.go 进行导入。如果你一直是 Solo 用户，那么以后可以考虑通过跑 Solo.go 来节省服务器内存用量。 系统分析 前端管理后台使用 Vue.js，前台皮肤使用 golang 原生的模板在 Solo.go 初期版本中以下功能暂不实现 插件机制（技术待研究）邮件发送（鸡肋功能）草稿夹（鸡肋功能） Solo v2.5.0 提供 JSON 导出功能 多租户 这里的\u201c多租户\u201d指的是在 Solo.go 上可以创建多个独立博客，每个独立博客有自己的管理员，自己的皮肤，和其他博客在功能上完全隔离。 每个独立博客是一个团队博客，团队使用同一个后台，同一个前端皮肤。 所有用户账号都必须是黑客派社区的账号初始化时的用户是平台管理员，并且初始化一个博客，使用 /{......","articleStatus":0,"articlePermalink":"/articles/2017/09/11/1505113028471.html","articleImg1URL":"https://img.hacpai.com/bing/20190214.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"云平台之多租户","articleAbstractText":"在云领域我们经常会听到一个词：多租户。这个词在不同的语境中有着不同的含义，本文将介绍云平台中的多租户的概念以及实现多租户支持的思路。","articleStatus":0,"articlePermalink":"/cloud-app-platform-multitenancy","articleImg1URL":"https://img.hacpai.com/bing/20180322.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}