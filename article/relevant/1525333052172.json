{"relevantArticles":[{"articleTitle":"C实现的键盘钩子","articleAbstractText":"*文件名：KeyBoardHook.c用途：键盘钩子的演示程序编程环境：WinXPSP2+CL8.0完成日期：2006.3Ver0.01作者：88250联系方式：E-mail:DL88250@gmail.comQQ:845765*#define_WIN32_WINNT0x0400#includestdio.h#includestdlib.h#includewindows.h#pragmacommentlib,User32.libDWORDg_tid=0;HHOOKg_hook=0;BOOLCALLBACKcon_handlerDWORDg_tid{PostThreadMessag....","articleStatus":0,"articlePermalink":"/articles/2007/05/05/1178377080000.html","articleImg1URL":"https://img.hacpai.com/bing/20180517.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"重装系统后 git 烂了","articleAbstractText":"C:\\Users\\Administrator&gt;git fatal: open /dev/null or dup failed: No such file or directory Windows 上也有 /dev/null？？？？Google 一圈后发现确实有，是用一个系统服务模拟的： C:\\Users\\Administrator&gt;sc query null SERVICE_NAME: null TYPE : 1 KERNEL_DRIVER STATE : 1 STOPPED WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x0 手动启动该服务报错： C:\\Users\\Administrator&gt;sc start null [SC] StartService 失败 577: Windows 无法验证此文件的数字签名。某软件或硬件最近有所更改，可能安装了签名错误或损毁的文件，或者安装的文件可能是来路不明的恶意软件。 C:\\Windows\\System3....","articleStatus":0,"articlePermalink":"/articles/2018/02/24/1519471473213.html","articleImg1URL":"https://img.hacpai.com/bing/20181008.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"使用 NGINX 流控和 fail2ban 防止 CC 攻击","articleAbstractText":"背景知识 CC 攻击 攻击者通过创建大量请求导致服务器资源耗尽，主要针对特定服务接口，属于实现 DoS 攻击的一种方式（DoS 攻击更多是针对网络端口，而不是具体服务接口）。 NGINX 流控  limit_req_zone：通过\u201c漏桶\u201d算法限制每个 IP 发起的请求频率。limit_conn_zone：限制每个 IP 发起的连接数。 fail2ban 通过匹配服务器日志操作 iptables 来限制客户端网络连接。 实践配置 NGINX 部分 在 http 部分中配置： limit_req_zone $binary_remote_addr zone=sym:10m rate=5r/s; limit_conn_zone $binary_remote_addr zone=conn_sym:10m;然后在需要流控的 location 部分配置： limit_req zone=sym burst=5; limit_conn conn_sym 10;重启 NGINX 后当有超流客户端请求时将在 NGINX error.log（默认在 /var/log/nginx/error.log） 中看到类....","articleStatus":0,"articlePermalink":"/articles/2017/02/13/1486915389413.html","articleImg1URL":"https://img.hacpai.com/bing/20190121.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"离开几天","articleAbstractText":"昨天把硬盘格了，现在在用Windows....好难用，好难用。感觉网速变慢了，效率低下了。。。。目前电脑上所有开发工具都没有了，唯一有的是一套大学英语4级听力。好悲惨，Ubuntu 8.04还有12天！等一下就好了，经常安慰自己，呵呵。不过现在最头疼的是Spring2.5.x的参考手册翻译还有一点点活没做完，会影响进度的，呃。。。。明天翻译一下。等新系统装好了要开始写C++了，初步决定用NetBeans的C++开发环境，不知道好不好用。不行的话还是Emacs，嘿嘿~好了，在等12天，马上就好的 ：-还是听英语去了，HOHO~","articleStatus":0,"articlePermalink":"/articles/2008/04/12/1208023440000.html","articleImg1URL":"https://img.hacpai.com/bing/20181116.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"GitHub Windows 安装器","articleAbstractText":"GitHub 已经提供了完整安装包，所以这个项目可以退休了 :smile: GitHub Windows 安装器，简称 GWI。项目地址：https://github.com/b3log/github-windows-installer 项目背景 GitHub Windows 是在线安装的，需要连接亚马逊云。因为你懂的原因，使得安装 GitHub Windows 成了一个问题 :sob: 解决方案 本库是一个 GitHub Windows 安装器的 golang 实现，在 网络条件好的地方 运行就可以制作安装包啦！ 网络条件好的地方：国外服务器。比如阿里云按量付费的 ECS，选硅谷节点最低配置。 使用步骤 在国外服务器上部署 gwi（下载或自行构建） 运行 gwi，将在当前工作目录生成 github-windows.zip 安装包 下载安装包到本地后运行 GitHub.application 安装完成！ 原理 下载应用元数据文件 下载包描述文件 解析所需包/资源文件下载路径 并发下载 具体请看代码 :smirk:","articleStatus":0,"articlePermalink":"/articles/2017/03/26/1490498197453.html","articleImg1URL":"https://img.hacpai.com/bing/20171225.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"C实现缓冲区溢出","articleAbstractText":"*文件名：SimpleBufferOverflow.c用途：缓冲区溢出实验编程环境：WinXPSP2+CL8.0完成日期：2006.4Ver0.01作者：88250联系方式：E-mail:DL88250@gmail.comQQ:845765*#includestdio.h #includestring.h #includewindows.h charlargebuff[512]; #defineJUMPESPGtw charshellcode[]=;voidfun{printftest,beinghacked!!! ;}mycopycharlargebuff[]{charsma....","articleStatus":0,"articlePermalink":"/articles/2007/05/05/1178376960000.html","articleImg1URL":"https://img.hacpai.com/bing/20180316.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"理解 HTTPS 原理，SSL/TLS 协议","articleAbstractText":"###为什么要使用 HTTPS 当我们使用 HTTP 协议时，传输的数据是不安全的，因为所有在客户端和服务端往来的数据都是明文： * 第三方可以获取到真实数据 * 第三方可以篡改数据 * 第三方可以冒充服务端或客户端 为了解决这些问题，需要在 HTTP 协议中加入一个安全机制，由此并产生了 HTTPS，我们可以认为 HTTPS = HTTP + TLS/SSL。TLS/SSL 的引入解决了安全问题，而上层应用协议还是 HTTP。 ###历史 SSL（Secure Sockets Layer）中文称作\u201c安全套接层\u201d，TLS（Transport Layer Security），中文称作\u201c传输层安全协议\u201d。 1. 1994 年，网景（NetScape）公司设计了 SSL 1.0 2. 1995 年，SSL 2.0，存在严重漏洞 3. 1996 年，SSL 3.0，得到大规模应用 4. 1999 年，IETF 对 SSL 进行标准化，发布了 TLS 1.0 5. 2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.1 和 TLS 1.2 在应用层，我们习惯将两者并称 TL....","articleStatus":0,"articlePermalink":"/articles/2015/11/19/1447920990604.html","articleImg1URL":"https://img.hacpai.com/bing/20181104.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}