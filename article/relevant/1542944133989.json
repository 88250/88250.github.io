{"relevantArticles":[{"articleTitle":"正能量的馈赠","articleAbstractText":"剧场效应 百度百科中关于剧场效应的解释： 卢梭最早使用剧场效应症，概括以巴黎为代表的整个文明生活状况。他指出当时的巴黎被戏剧化，本身成了一座大剧场，市民既观剧，亦被动演剧，在不自觉状态中被彻底异化，抛出了自我，生活于别处 在经济学中是指，如果剧院着火了，按照个人利益最大化，那就是先跑出去，如果每个人都这么想这么做，其结果必然是大家都拥堵在门口，谁都跑不出去，个人追求利益最大化而不考虑他人利益的行为，导致了群体悲剧的上演 还有一种剧场（踮脚）效应更是普遍存在： 观众在剧场中看戏，期初每个人都坐着，但突然有个人为了获得更好的观看效果就站了起来，旁边的人对他劝阻无效，剧场管理员也不在岗。最后全场的观众都从坐着看戏变成了站着看戏。所有人都比原来付出了更多的努力，而换来的确实和原来一样（甚至更差）的观剧效果。更悲剧的是虽然大家都更累了，但不会有任何人再坐下来。 站着努力踮脚看戏虽然非常累，但谁也不肯就此放弃，咬紧牙坚持到戏剧结束。然而第一排观众从开始到结束都安稳的坐着欣赏剧情。 互联网行业 信息传输、软件和信息技术服务业是全国最高平均工资（2017）的行业 这个行业发展变化非常快，....","articleStatus":0,"articlePermalink":"/articles/2019/04/15/1555290109269.html","articleImg1URL":"https://img.hacpai.com/bing/20180714.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"工程师和科学家","articleAbstractText":"现在很多公司对程序员的招聘要求已经越来越高，比如招前端要求熟悉后端，招后端要求熟悉前端；招 Java 要求熟悉 golang。虽然名义上说是加分项，但其实也算是个硬性要求了，因为你不会但你的竞争者会。 程序员这个行业也经历了\u201c合久必分分久必合\u201d。很多年以前的招聘就要求啥都会，从前台都后台，从设计到运维。后来行业分工出现了，产品经理、设计师、前端、后端、测试、运维、运营、客服等岗位各司其职，一个较为\u201c正规\u201d的技术团队至少会包含这几个工种。 再后来，更细化的岗位接踵而至，交互设计师、UI 设计师、用户体验设计师、文案师、前中后台开发、策划师、算法工程师、DBA、业务架构师、技术架构师、流程 QA 等等，只要需要一个独立岗，这个岗上基本就是一个团队。 到现在，很多企业为了扁平化、敏捷管理，团队进行组合优化，\u201c全才型\u201d员工更受欢迎。仅从技术方面分析，这是因为云计算的普及化，很多企业上云（或者本地私有云）后，大部分技术都以平台化、组件化方式进行了实现，这对人的全面性要求就更高，深度要求则不会那么明显。 所以一个有趣的现象就是，现在的很多招聘事实上是面向独立开发者的，独立开发者比全栈工程师要求更高....","articleStatus":0,"articlePermalink":"/articles/2018/12/23/1545535621318.html","articleImg1URL":"https://img.hacpai.com/bing/20180622.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"呼叫中心架构设计","articleAbstractText":"从呼叫模式上看，目前业界大多数采用的是\u201c回拨\u201d模式，即由呼叫中心发起两路呼叫，然后将两路进行连通。","articleStatus":0,"articlePermalink":"/articles/2016/07/24/1469349167953.html","articleImg1URL":"https://img.hacpai.com/bing/20180412.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"中央公园","articleAbstractText":"技术宅可以改变世界，但首先需要做的是认识清楚这个世界。程序员可以通过该应用结交其他程序员，坐在一起聊聊技术、生活，扩宽视野；从程序员这个环境出发，发现并探索这个世界。","articleStatus":0,"articlePermalink":"/central-perk","articleImg1URL":"https://img.hacpai.com/bing/20180525.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"吃什么","articleAbstractText":"相信大家都有出现过不只一次\u201c吃什么？\u201d的经历吧，虽然那感觉不至于糟糕到让我们不知所措，我们也一直没那它太当回事，但其实这真的是一个问题，而且是一个很难解决的问题。","articleStatus":0,"articlePermalink":"/articles/2014/05/09/1399599408605.html","articleImg1URL":"https://img.hacpai.com/bing/20180720.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"链接熔炉设计","articleAbstractText":"背景 很多人都有收藏网络资料的习惯，常用的方式有两种： 1. 浏览器书签 2. 笔记软件 对于个人的知识管理这两种方式都比较有效，但是如果要将自己整理好的内容分享给其他人时，可选的方式就比较有限了，特别是当要批量分享某个类目时。 除了分享的场景，很多时候还 需要大众的力量进行资源的完善和维护 。完善意味着挖掘新的资源添加进来，维护意味着修正一些不可用的资源。这个场景下最有效的方式是通过 Wiki 进行协作编辑。 Wiki 方式主要站点是 [WiKiPedia] ，但因为维基百科是一个综合化的知识库，并且对于主题侧重的是权威性，所以一些我们觉得有帮助但比较小众的资源链接是整合不到其中的。 目前流行的一种方式是通过 [GitHub] 进行知识资源整理，比如一些关注数非常高的资源导航库（Awesome/资源合集等）。通常的协作流程是通过 Pull Request 发起，库 Owner 同意合并后就能够将 PR 发起者的变更（比如加入一个有价值的链接）同步到主库。这个协作方式略比 Wiki 复杂一些，但在程序员圈子是非常受欢迎的。 ### 现状分析 通过观察 GitHu....","articleStatus":0,"articlePermalink":"/articles/2016/09/07/1473238756829.html","articleImg1URL":"https://img.hacpai.com/bing/20171217.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}