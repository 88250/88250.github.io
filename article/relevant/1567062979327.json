{"relevantArticles":[{"articleTitle":"Markdown 解析原理详解和 Markdown AST 描述","articleAbstractText":"概述 本文主要介绍 Markdown 引擎 Lute 的整体处理流程，并详细描述了 Markdown 抽象语法树结构。 编译原理 我们通过编译原理实现了 Lute ，大致步骤是预处理、词法分析、语法分析、代码生成这几个步骤。代码结构方面我们分为两部分，解析和渲染。 1// Markdown 将 markdown 文本字节数组处理为相应的 html 字节数组。name 参数仅用于标识文本，比如可传入 id 或者标题，也可以传入 \"\"。 2func (lute *Lute) Markdown(name string, markdown []byte) (html []byte) { 3 tree := parse.Parse(name, markdown, lute.Options) 4 renderer := render.NewHtmlRenderer(tree) 5 html = renderer.Render() 6 return 7} 解析过程用于从 Markdown 原文构造抽象语法树。 1// Parse 会将 markdown 原始文本字节数组解析为一颗语法树。 2f.......","articleStatus":0,"articlePermalink":"/articles/2020/04/23/1587637426085.html","articleImg1URL":"https://img.hacpai.com/file/2020/04/devtool-d3d8a727.gif?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}