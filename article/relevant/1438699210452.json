{"relevantArticles":[{"articleTitle":"你保存用户密码的姿势正确吗？","articleAbstractText":"这几年陆陆续续有很多大站被脱裤，最终导致了很多用户的密码明文泄露。本文不探讨脱裤技术，主要研究的是如何正确（尽量安全）地保存用户密码。","articleStatus":0,"articlePermalink":"/secure-salted-password-hashing","articleImg1URL":"https://img.hacpai.com/bing/20180313.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Go 边看边练 -《Go 学习笔记》系列（十一）","articleAbstractText":"上一篇： [1438699210452] ---- ### ToC * Go 边看边练 -《Go 学习笔记》系列（一）- 变量、常量 * Go 边看边练 -《Go 学习笔记》系列（二）- 类型、字符串 * Go 边看边练 -《Go 学习笔记》系列（三）- 指针 * Go 边看边练 -《Go 学习笔记》系列（四）- 控制流1 * Go 边看边练 -《Go 学习笔记》系列（五）- 控制流2 * [Go 边看边练 -《Go 学习笔记》系列（六）- 函数](http://symphony.b3....","articleStatus":0,"articlePermalink":"/articles/2015/08/05/1438763483577.html","articleImg1URL":"https://img.hacpai.com/bing/20181101.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"理解 HTTPS 原理，SSL/TLS 协议","articleAbstractText":"###为什么要使用 HTTPS 当我们使用 HTTP 协议时，传输的数据是不安全的，因为所有在客户端和服务端往来的数据都是明文： * 第三方可以获取到真实数据 * 第三方可以篡改数据 * 第三方可以冒充服务端或客户端 为了解决这些问题，需要在 HTTP 协议中加入一个安全机制，由此并产生了 HTTPS，我们可以认为 HTTPS = HTTP + TLS/SSL。TLS/SSL 的引入解决了安全问题，而上层应用协议还是 HTTP。 ###历史 SSL（Secure Sockets Layer）中文称作\u201c安全套接层\u201d，TLS（Transport Layer Security），中文称作\u201c传输层安全协议\u201d。 1. 1994 年，网景（NetScape）公司设计了 SSL 1.0 2. 1995 年，SSL 2.0，存在严重漏洞 3. 1996 年，SSL 3.0，得到大规模应用 4. 1999 年，IETF 对 SSL 进行标准化，发布了 TLS 1.0 5. 2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.1 和 TLS 1.2 在应用层，我们习惯将两者并称 TL....","articleStatus":0,"articlePermalink":"/articles/2015/11/19/1447920990604.html","articleImg1URL":"https://img.hacpai.com/bing/20181104.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Go 边看边练 -《Go 学习笔记》系列（九）","articleAbstractText":"上一篇： [1438311936449] ---- ### ToC * Go 边看边练 -《Go 学习笔记》系列（一）- 变量、常量 * Go 边看边练 -《Go 学习笔记》系列（二）- 类型、字符串 * Go 边看边练 -《Go 学习笔记》系列（三）- 指针 * Go 边看边练 -《Go 学习笔记》系列（四）- 控制流1 * Go 边看边练 -《Go 学习笔记》系列（五）- 控制流2 * [Go 边看边练 -《Go 学习笔记》系列（六）- 函数](http://symphony.b3....","articleStatus":0,"articlePermalink":"/articles/2015/08/03/1438596722873.html","articleImg1URL":"https://img.hacpai.com/bing/20180609.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Go 边看边练 -《Go 学习笔记》系列（十三）","articleAbstractText":"上一篇： [1438845728987] ---- ### ToC * Go 边看边练 -《Go 学习笔记》系列（一）- 变量、常量 * Go 边看边练 -《Go 学习笔记》系列（二）- 类型、字符串 * Go 边看边练 -《Go 学习笔记》系列（三）- 指针 * Go 边看边练 -《Go 学习笔记》系列（四）- 控制流1 * Go 边看边练 -《Go 学习笔记》系列（五）- 控制流2 * [Go 边看边练 -《Go 学习笔记》系列（六）- 函数](http://symphony.b3....","articleStatus":0,"articlePermalink":"/articles/2015/08/07/1438938175118.html","articleImg1URL":"https://img.hacpai.com/bing/20180918.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Solo 的 golang 版计划","articleAbstractText":"Solo.go Solo 经过多年众多用户的使用、反馈和开发迭代，目前从功能上和实现上都比较稳定了，我和 @Vanessa 都觉得是时候将 Solo 推入维护阶段了，后续只做必要的缺陷修复。 另外，我们打算用 golang 实现一个 Solo.go（代号），并在 Solo v2.5.0 中提供 JSON 格式的数据导出功能，以便 Solo.go 进行导入。如果你一直是 Solo 用户，那么以后可以考虑通过跑 Solo.go 来节省服务器内存用量。 系统分析 前端管理后台使用 Vue.js，前台皮肤使用 golang 原生的模板在 Solo.go 初期版本中以下功能暂不实现 插件机制（技术待研究）邮件发送（鸡肋功能）草稿夹（鸡肋功能） Solo v2.5.0 提供 JSON 导出功能 多租户 这里的\u201c多租户\u201d指的是在 Solo.go 上可以创建多个独立博客，每个独立博客有自己的管理员，自己的皮肤，和其他博客在功能上完全隔离。 每个独立博客是一个团队博客，团队使用同一个后台，同一个前端皮肤。 所有用户账号都必须是黑客派社区的账号初始化时的用户是平台管理员，并且初始化一个博客，使用 /{......","articleStatus":0,"articlePermalink":"/articles/2017/09/11/1505113028471.html","articleImg1URL":"https://img.hacpai.com/bing/20190214.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Go 边看边练 -《Go 学习笔记》系列（十二）","articleAbstractText":"上一篇： [1438763483577] ---- ### ToC * Go 边看边练 -《Go 学习笔记》系列（一）- 变量、常量 * Go 边看边练 -《Go 学习笔记》系列（二）- 类型、字符串 * Go 边看边练 -《Go 学习笔记》系列（三）- 指针 * Go 边看边练 -《Go 学习笔记》系列（四）- 控制流1 * Go 边看边练 -《Go 学习笔记》系列（五）- 控制流2 * [Go 边看边练 -《Go 学习笔记》系列（六）- 函数](http://symphony.b3....","articleStatus":0,"articlePermalink":"/articles/2015/08/06/1438845728987.html","articleImg1URL":"https://img.hacpai.com/bing/20180905.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}