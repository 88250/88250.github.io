{"relevantArticles":[{"articleTitle":"GitHub Star 的意义","articleAbstractText":"以目前来看，GitHub 上有用的仓库大致分为两种类型，项目和文档。 以代码为主的可运行项目 这类项目（排除那些没有替代品的）是有具体使用场景的，或是框架或是应用。如果从星数看，这类项目是比较难获得星的，因为： 项目具体的使用场景相对固定，这也就决定了其目标用户毕竟是少数项目的效果非常直观，通过代码质量、运行结果、文档、社区等可以很容易对比出同类项目的优劣 如果你\u201c看不起\u201d或者\u201c看不懂\u201d 的项目有较多星，说明的确是对一部分人有用，这是真的有价值的项目。它们节省了目标用户的时间、减少潜在的缺陷等。另外，这类的项目同质化严重，基本都大同小异，但它们之间的星数还是会有数量级上的差距的，这就是优秀、一般、一般般的直观差别。 如果要从设计或者代码上看这类项目有啥值得学习的，那可能还真没有。因为这类项目的本质其实就是干了一些脏活累活，而正是这些脏活累活很少人愿意自己干，更何况干得漂亮的了。 漂亮的 API 背后都是丑陋不堪的实现，丑陋是因为我们不想看，看不懂，发现不了它们的美。 以 Markdown 为主的文档 这类仓库在我看来大部分都是没用的： Awesome-xxx面试宝典-xxx 书籍收......","articleStatus":0,"articlePermalink":"/articles/2019/01/07/1546796187762.html","articleImg1URL":"https://img.hacpai.com/bing/20180319.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"重装系统后 git 烂了","articleAbstractText":"C:\\Users\\Administrator&gt;git fatal: open /dev/null or dup failed: No such file or directory Windows 上也有 /dev/null？？？？Google 一圈后发现确实有，是用一个系统服务模拟的： C:\\Users\\Administrator&gt;sc query null SERVICE_NAME: null TYPE : 1 KERNEL_DRIVER STATE : 1 STOPPED WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x0 手动启动该服务报错： C:\\Users\\Administrator&gt;sc start null [SC] StartService 失败 577: Windows 无法验证此文件的数字签名。某软件或硬件最近有所更改，可能安装了签名错误或损毁的文件，或者安装的文件可能是来路不明的恶意软件。 C:\\Windows\\System3....","articleStatus":0,"articlePermalink":"/articles/2018/02/24/1519471473213.html","articleImg1URL":"https://img.hacpai.com/bing/20181008.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"开源经验谈","articleAbstractText":"Bootstrap 古话说得好：\u201c万事开头难\u201d。 开头在本质上是解决 \u201cBootstrapping\u201d，人们一直使用这个比喻来描述解决启动问题的方法，即一个人试图用自己的鞋带将自己拉起来。比如按下电脑开机按钮后初始化系统被广泛称作自举引导（简称 booting）。 想做好一个开源项目，就先得规划一个好的启动方式。 GitHub 10 多年前做开源项目托管的话基本只有一个选择，那就是 SourceForge。期间也有过一些其他大厂的项目托管服务，比如 Google Code，Sun/Oracle 的 Project Kenai，现在都停服了。目前 GitHub 已然是全球最大的开源项目托管服务商了，促成这样现状的最大原因有这几个方面吧： git 版本控制系统的流行，并做了一些更简单的工作流，比如 Pull Request更好、更现代化的用户体验，比如 issue comments 的实时推送 API 开放平台，构建第三方应用的生态系统持续不断的改进，GitHub 隔三差五会有一些细节改进，并且桌面客户端工具也在不断演进 目前 GitHub 是开源项目托管的不二之选。国内也有类 GitHu.....","articleStatus":0,"articlePermalink":"/articles/2017/08/01/1501603146956.html","articleImg1URL":"https://img.hacpai.com/bing/20180912.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"我在 GitHub 上的开源项目","articleAbstractText":"symphony Java ?418&nbsp;&nbsp;⭐️11313&nbsp;&nbsp;?3415&nbsp;&nbsp;?https://sym.b3log.org ? 一款用 Java 实现的现代化社区（论坛/BBS/社交网络/博客）平台。https://hacpai.com 2. solo Java ?495&nbsp;&nbsp;⭐️7023&nbsp;&nbsp;?2460&nbsp;&nbsp;?https://solo.b3log.org ? 一款小而美的博客系统，专为程序员设计。https://hacpai.com/tag/solo 3. baidu-netdisk-downloaderx JavaScript ?110&nbsp;&nbsp;⭐️3906&nbsp;&nbsp;?1078&nbsp;&nbsp;?https://hacpai.com/tag/bnd ⚡️ 百度网盘不限速下载器 BND，支持 Windows、Mac 和 Linux。 4. wide Go ?201&nbsp;&nbsp;⭐️2738&amp;nbsp......","articleStatus":0,"articlePermalink":"/my-github-repos","articleImg1URL":"https://img.hacpai.com/bing/20190316.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"GitHub Windows 安装器","articleAbstractText":"GitHub 已经提供了完整安装包，所以这个项目可以退休了 :smile: GitHub Windows 安装器，简称 GWI。项目地址：https://github.com/b3log/github-windows-installer 项目背景 GitHub Windows 是在线安装的，需要连接亚马逊云。因为你懂的原因，使得安装 GitHub Windows 成了一个问题 :sob: 解决方案 本库是一个 GitHub Windows 安装器的 golang 实现，在 网络条件好的地方 运行就可以制作安装包啦！ 网络条件好的地方：国外服务器。比如阿里云按量付费的 ECS，选硅谷节点最低配置。 使用步骤 在国外服务器上部署 gwi（下载或自行构建） 运行 gwi，将在当前工作目录生成 github-windows.zip 安装包 下载安装包到本地后运行 GitHub.application 安装完成！ 原理 下载应用元数据文件 下载包描述文件 解析所需包/资源文件下载路径 并发下载 具体请看代码 :smirk:","articleStatus":0,"articlePermalink":"/articles/2017/03/26/1490498197453.html","articleImg1URL":"https://img.hacpai.com/bing/20171225.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"使用 GitBook 写文档","articleAbstractText":"最近发现很多技术书籍都放在&nbsp;GitBook&nbsp;上提供给人们阅读，刚好&nbsp;Wide&nbsp;也需要写文档，索性就尝试使用 GitBook 来做。","articleStatus":0,"articlePermalink":"/write-doc-via-gitbook","articleImg1URL":"https://img.hacpai.com/bing/20180402.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"以太坊同步一直\u201c卡着\u201d的原因","articleAbstractText":"用 geth 下载区块数据基本完成（基本追平当前区块高度），如果日志还一直刷如下两句： Imported new state entries .... Stalling state sync, dropping peer 那说明区块数据确实差不多已经跟上最新数据了，但是状态数据还差很多，正在同步。 如果你同步了很久（比如一两天）还是落后主网几十个块，那说明可能是你的磁盘性能不足，因为状态数据同步的瓶颈在磁盘 IO，不在带宽，换个 SSD 再同步就好。 如果你要同步全节点，那一定要用 SSD 磁盘，详细解释说明请看这里。 在区块高度 5244801 时同步完成大概是这么个情况：","articleStatus":0,"articlePermalink":"/articles/2018/03/11/1520767628593.html","articleImg1URL":"https://img.hacpai.com/bing/20180415.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}