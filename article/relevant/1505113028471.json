{"relevantArticles":[{"articleTitle":"模板引擎实现（一）词法分析","articleAbstractText":"如果你想实现模版引擎、编译器前端、文本解析器（比如 Markdown ）或想要了解它们的实现原理，请一定不要错过本系列的文章 :grin: 模板引擎实现（一）词法分析 另外，* 本系列的文章面向的是撸起袖子就开干的朋友，所以不会介绍基础理论，比如 DFA/NFA，算法复杂度等（确切的说是没法介绍理论，因为作者能力有限 :joy:）* 在使用到的术语/定义方面作者是认真查过资料并再三斟酌的，不会出现胡编乱造，请放心理解和使用 :white_check_mark:* 本系列文章的对应项目是 freemarker.go（FreeMarker 的 golang 实现），欢迎大家关注点赞 :star2: 本文介绍了词法分析的基本概念，主要参考 golang 的 text/template/parse 包源码进行解析。 词法分析 将面向源码的字符流转成 token 流的过程是词法分析。用\u201c流\u201d来描述主要说明了处理过程是有序和连续的。比如读取源码文件时是一个字符一个字符读取的，生成的 token 也是一个接一个的。 当我们在源码中看到 scanner、lex/le....","articleStatus":0,"articlePermalink":"/articles/2017/05/31/1496233258522.html","articleImg1URL":"https://img.hacpai.com/bing/20190214.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"理解 HTTPS 原理，SSL/TLS 协议","articleAbstractText":"###为什么要使用 HTTPS 当我们使用 HTTP 协议时，传输的数据是不安全的，因为所有在客户端和服务端往来的数据都是明文： * 第三方可以获取到真实数据 * 第三方可以篡改数据 * 第三方可以冒充服务端或客户端 为了解决这些问题，需要在 HTTP 协议中加入一个安全机制，由此并产生了 HTTPS，我们可以认为 HTTPS = HTTP + TLS/SSL。TLS/SSL 的引入解决了安全问题，而上层应用协议还是 HTTP。 ###历史 SSL（Secure Sockets Layer）中文称作\u201c安全套接层\u201d，TLS（Transport Layer Security），中文称作\u201c传输层安全协议\u201d。 1. 1994 年，网景（NetScape）公司设计了 SSL 1.0 2. 1995 年，SSL 2.0，存在严重漏洞 3. 1996 年，SSL 3.0，得到大规模应用 4. 1999 年，IETF 对 SSL 进行标准化，发布了 TLS 1.0 5. 2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.1 和 TLS 1.2 在应用层，我们习惯将两者并称 TL....","articleStatus":0,"articlePermalink":"/articles/2015/11/19/1447920990604.html","articleImg1URL":"https://img.hacpai.com/bing/20181104.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Go 边看边练 -《Go 学习笔记》系列（十四）（已完结）","articleAbstractText":"上一篇： [1438938175118] ---- ### ToC * Go 边看边练 -《Go 学习笔记》系列（一）- 变量、常量 * Go 边看边练 -《Go 学习笔记》系列（二）- 类型、字符串 * Go 边看边练 -《Go 学习笔记》系列（三）- 指针 * Go 边看边练 -《Go 学习笔记》系列（四）- 控制流1 * Go 边看边练 -《Go 学习笔记》系列（五）- 控制流2 * [Go 边看边练 -《Go 学习笔记》系列（六）- 函数](http://symphony.b3....","articleStatus":0,"articlePermalink":"/articles/2015/08/10/1439194647152.html","articleImg1URL":"https://img.hacpai.com/bing/20181207.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Solo 从设计到实现后记","articleAbstractText":"本文是《Solo 从设计到实现》的一个章节，该系列文章将介绍 Solo 这款 Java 博客系统是如何从无到有的，希望大家能通过它对 Solo 从设计到实现有个直观地了解、能为想参与贡献的人介绍清楚项目，也希望能为给重复发明重新定义博客系统的人做个参考 ❤️ 轮子和时间 \u201c不要重复发明轮子\u201d在程序员界的流行应该是从 Rod 发明 Spring 开始。他曾经在其著作《Without EJB》中使用了这个谚语，并阐述了 Spring 的诞生基于这一理念。 重复发明轮子最大的问题在于浪费时间。作为作者，浪费时间重复劳动；作为用户，浪费时间尝试。一个不好的轮子会严重浪费大家的时间，所以\u201c不要重复发明轮子\u201d主要针对的是那些不够圆的轮子而言。 新轮子肯定不会很圆。要么是设计问题，要么是工艺问题。设计问题最好在设计阶段就确认好，工艺问题可以花时间解决。 我觉得只要大家有时间，就尽可能发明轮子吧。无论是产品层面的优化改进，还是框架技术层面的创新尝试，我觉得都是值得的。作为普通程序员，浪费一些时间并没有什么大不了的，相信勇于尝试并坚持下去，一定能够改变一些事情的。 成功的开源 什么是成功 一个开源项目.....","articleStatus":0,"articlePermalink":"/articles/2020/02/08/1581145208243.html","articleImg1URL":"https://img.hacpai.com/bing/20190323.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Go 编译跨平台","articleAbstractText":"适用于 [Linux]，拷贝代码后新建文件 cross.bash，并在 ${go 安装路径}/src 目录下执行。","articleStatus":0,"articlePermalink":"/compile-go-cross-platform","articleImg1URL":"https://img.hacpai.com/bing/20181230.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Solo 2.3.0 升级 2.4.0 问题与解决","articleAbstractText":"如果你的 Solo 在 2.3.0 升级 2.4.0 后不能正常打开，请参考如下步骤进行问题确认与解决。 停止 Solo 进程查看 page 表结构是否存在 pageIcon 字段，如果没有请手动添加 pageIcon varchar(255)查看 option 表数据，是否存在 oId 列为 statistic 开头的 5 行如下数据，如果不存在就插入 5 行（optionCategory 列表全部使用 statistic），数据来自 statistic 表 查看 option 表数据 oId 为 version 的行 optionValue 值是否为 2.4.0，如果不是则改为 2.4.0确认以上步骤，无误的话删除 statistic 表重新启动 Solo 进程 该问题主要会发生在使用 MySQL 某些版本的 Solo 上，给大家带来的不便之处请大家多多包涵，原谅原谅。","articleStatus":0,"articlePermalink":"/articles/2017/10/18/1508292644879.html","articleImg1URL":"https://img.hacpai.com/bing/20180419.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"你保存用户密码的姿势正确吗？","articleAbstractText":"这几年陆陆续续有很多大站被脱裤，最终导致了很多用户的密码明文泄露。本文不探讨脱裤技术，主要研究的是如何正确（尽量安全）地保存用户密码。","articleStatus":0,"articlePermalink":"/secure-salted-password-hashing","articleImg1URL":"https://img.hacpai.com/bing/20180313.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}