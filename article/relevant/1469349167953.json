{"relevantArticles":[{"articleTitle":"使用 NGINX 流控和 fail2ban 防止 CC 攻击","articleAbstractText":"背景知识 CC 攻击 攻击者通过创建大量请求导致服务器资源耗尽，主要针对特定服务接口，属于实现 DoS 攻击的一种方式（DoS 攻击更多是针对网络端口，而不是具体服务接口）。 NGINX 流控  limit_req_zone：通过\u201c漏桶\u201d算法限制每个 IP 发起的请求频率。limit_conn_zone：限制每个 IP 发起的连接数。 fail2ban 通过匹配服务器日志操作 iptables 来限制客户端网络连接。 实践配置 NGINX 部分 在 http 部分中配置： limit_req_zone $binary_remote_addr zone=sym:10m rate=5r/s; limit_conn_zone $binary_remote_addr zone=conn_sym:10m;然后在需要流控的 location 部分配置： limit_req zone=sym burst=5; limit_conn conn_sym 10;重启 NGINX 后当有超流客户端请求时将在 NGINX error.log（默认在 /var/log/nginx/error.log） 中看到类....","articleStatus":0,"articlePermalink":"/articles/2017/02/13/1486915389413.html","articleImg1URL":"https://img.hacpai.com/bing/20190121.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"敏感数据处理","articleAbstractText":"背景 大多数应用或多或少都会涉及到敏感数据处理，比如用户的手机号、身份证号，甚至银行卡账号。作为应用的开发者，如何 安全地 维护这些敏感数据呢？ 这里讨论的安全不是指服务器如何保护，而是在数据库层面做敏感数据的分离： * 业务库中不保存敏感数据，只保存混淆过的数据，比如电话字段保存的是 133****9961，在数据层面就进行脱敏 * 敏感数据统一保存在另一个库中，有应用调用一个服务来建立原值和混淆值的映射关系 * 业务库中因为保存的是脱敏过的数据，通过只读复制镜像可以很方便地提供给其他服务使用，比如 OLAP * 除了技术开发上方便，运维上也方便了很多，降低了敏感数据被暴露到外部的可能性 ### 技术设计 提供服务接口给应用存取敏感数据，本质上是一个 KV 存取服务。  一些细节： * 表 protyle 的 domain 字段用于标识该记录的作用域，在一个作用域上相同的值要保证唯一 * 表 protyle 的 ha....","articleStatus":0,"articlePermalink":"/articles/2016/05/11/1462956775250.html","articleImg1URL":"https://img.hacpai.com/bing/20180617.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"基于数据库复制的技术架构讨论","articleAbstractText":"背景 这里的数据库复制指的是将 主 业务数据库实例上的库通过同步机制（比如 MySQL binlog）准实时（比如最大延迟为 3s）复制到其他数据库实例上，这些实例库只做查询，不做数据写入。 这套架构设计的主要优势： * 各业务应用能够方便地在自己的 DB 实例上进行业务查询，比如通过 join 主业务库 * 在不明确业务边界、没有梳理好业务对应技术模块时可以最小成本进行变更或扩展 * 实现读写分离，提升性能 ### 一些问题 实际在实施过程中主要遇到两个问题： 1. 不可能实时完成数据同步，将造成业务上面的不一致，比如调用主库服务更新数据后，在业务库上不能实时查询到已更新的数据 2. 很难保证高可用（在使用阿里 DTS 时出现过多次问题，自己做主从可能会好一些） 为了满足业务发展，复制库的数量会逐步增多（比如新开一个产品可能就需要多复制一套库），以上两个问题可能会导致严重的故障， [CAP] 不能兼得。 ### 服务化 基于数据库复制架构的核心理念是将数据源暴露给应用，开发者直接针对数据源进行开发，是一种非常直接的方式。 但随着业务的逐渐清晰，一些业务逻辑是可以抽....","articleStatus":0,"articlePermalink":"/articles/2016/06/07/1465278948107.html","articleImg1URL":"https://img.hacpai.com/bing/20180929.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"正能量的馈赠","articleAbstractText":"剧场效应 百度百科中关于剧场效应的解释： 卢梭最早使用剧场效应症，概括以巴黎为代表的整个文明生活状况。他指出当时的巴黎被戏剧化，本身成了一座大剧场，市民既观剧，亦被动演剧，在不自觉状态中被彻底异化，抛出了自我，生活于别处 在经济学中是指，如果剧院着火了，按照个人利益最大化，那就是先跑出去，如果每个人都这么想这么做，其结果必然是大家都拥堵在门口，谁都跑不出去，个人追求利益最大化而不考虑他人利益的行为，导致了群体悲剧的上演 还有一种剧场（踮脚）效应更是普遍存在： 观众在剧场中看戏，期初每个人都坐着，但突然有个人为了获得更好的观看效果就站了起来，旁边的人对他劝阻无效，剧场管理员也不在岗。最后全场的观众都从坐着看戏变成了站着看戏。所有人都比原来付出了更多的努力，而换来的确实和原来一样（甚至更差）的观剧效果。更悲剧的是虽然大家都更累了，但不会有任何人再坐下来。 站着努力踮脚看戏虽然非常累，但谁也不肯就此放弃，咬紧牙坚持到戏剧结束。然而第一排观众从开始到结束都安稳的坐着欣赏剧情。 互联网行业 信息传输、软件和信息技术服务业是全国最高平均工资（2017）的行业 这个行业发展变化非常快，....","articleStatus":0,"articlePermalink":"/articles/2019/04/15/1555290109269.html","articleImg1URL":"https://img.hacpai.com/bing/20180714.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"工程师和科学家","articleAbstractText":"现在很多公司对程序员的招聘要求已经越来越高，比如招前端要求熟悉后端，招后端要求熟悉前端；招 Java 要求熟悉 golang。虽然名义上说是加分项，但其实也算是个硬性要求了，因为你不会但你的竞争者会。 程序员这个行业也经历了\u201c合久必分分久必合\u201d。很多年以前的招聘就要求啥都会，从前台都后台，从设计到运维。后来行业分工出现了，产品经理、设计师、前端、后端、测试、运维、运营、客服等岗位各司其职，一个较为\u201c正规\u201d的技术团队至少会包含这几个工种。 再后来，更细化的岗位接踵而至，交互设计师、UI 设计师、用户体验设计师、文案师、前中后台开发、策划师、算法工程师、DBA、业务架构师、技术架构师、流程 QA 等等，只要需要一个独立岗，这个岗上基本就是一个团队。 到现在，很多企业为了扁平化、敏捷管理，团队进行组合优化，\u201c全才型\u201d员工更受欢迎。仅从技术方面分析，这是因为云计算的普及化，很多企业上云（或者本地私有云）后，大部分技术都以平台化、组件化方式进行了实现，这对人的全面性要求就更高，深度要求则不会那么明显。 所以一个有趣的现象就是，现在的很多招聘事实上是面向独立开发者的，独立开发者比全栈工程师要求更高....","articleStatus":0,"articlePermalink":"/articles/2018/12/23/1545535621318.html","articleImg1URL":"https://img.hacpai.com/bing/20180622.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"最近的被攻击记录","articleAbstractText":"最近几天黑客派一直在被 CC 攻击，目前是通过 IP 限制暂时解决。 从攻击客户端的 User-Agent 来看，对方的攻击手段大致是通过公有站点检查服务+肉鸡进行 CC。不过 UA 不一定准确，可能是伪造的，仅提供作为参考。 User-Agent IP 个数 Mozilla/4.0 (compatible;HostTracker/2.0;+http://www.host-tracker.com/) 90 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; cdnunion_monitor;) 130 Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/62.0.3183.0 Safari/537.36 400 Mozilla/4.0 900 下面的附件是截至到今早的攻击请求日志，已经进行了 IP 去重。攻击地区主要是中国和美国，大家可以搜索一下自己的 IP 是否出现在日志中，以便做出相应的....","articleStatus":0,"articlePermalink":"/articles/2019/02/18/1550460506963.html","articleImg1URL":"https://img.hacpai.com/bing/20180912.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"未来 APP 形态猜想","articleAbstractText":"大胆预测一下未来的应用程序形态，原生 APP 即传统 C/S 模式的应用程序将是未来的趋势。目前虽然基于浏览器 B/S 应用非常多，PWA 在 Google 的大力推广发展下已经逐步普及，但我还是觉得原生应用才是未来。 操作系统的发展 Windows、Mac 在桌面市场上已经没有敌手了。他们未来应该会做全平台的统一应用，全平台指的是移动端、PC 等设备上操作系统平台的统一，微软在这方面似乎已经先行一步。在不久的将来，开发者只需要开发一套代码，程序就可以跑在该操作系统平台的任何设备上。 操作系统也会为应用程序在打开、切换方式上做优化，让用户可以更方便地进行切换和管理。可能会很类似目前在浏览器上切换页签一样的用户体验。 浏览器的尴尬处境 目前主流的浏览器虽然在编程规范上已经逐渐统一、标准化，并拥有了一些原生应用的能力（比如可以通过 PWA 实现离线、通知等），但其归根结底还是没法为开发者带来\u201c一次编写，到处运行\u201d的便利，用户也需要在不同设备上重复安装 APP，相同 APP 在不同设备上的使用方式也没法得到一致的体验。 浏览器的\u201c手\u201d伸得再长，也还是运行在操作系统上，其作为一个\u201c应用沙箱\u201d显....","articleStatus":0,"articlePermalink":"/articles/2018/11/23/1542944133989.html","articleImg1URL":"https://img.hacpai.com/bing/20180915.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}