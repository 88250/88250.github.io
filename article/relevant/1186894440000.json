{"relevantArticles":[{"articleTitle":"合成(Composite)模式的Java实现[00原创]","articleAbstractText":"类图 Java实现代码  packagecn.edu.ynu.sei.composite;*抽象组件角色@author88250@version1.0.0,2007-9-4publicinterfaceComponent{返回自己的实例@returnpublicCompositegetComposite;某个业务方法*publicvoidsampleOperation;} packagecn.edu.ynu.sei.composite;importjava.util.Enumeration;importjava.util.Vector;***树....","articleStatus":0,"articlePermalink":"/articles/2007/09/22/1190490840000.html","articleImg1URL":"https://img.hacpai.com/bing/20180603.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"适配器(Adapter)模式的Java实现[00原创]","articleAbstractText":"这里以一个指方为圆的例子来说明适配器模式的原理和简单应用，本例子来自《Java与模式》。  类图 Java实现代码  packagecn.edu.ynu.sei.adapter;*球体接口br@author88250@version1.0.0,2007-8-28publicinterfaceBallF{计算表面积@returnpublicdoublecalculateArea;计算体积@returnpublicdoublecalculateVolume;返回半径值@returnpublicdoublegetRadius;设置半径值*@....","articleStatus":0,"articlePermalink":"/articles/2007/08/28/1188337020000.html","articleImg1URL":"https://img.hacpai.com/bing/20180119.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"建造者(BUilder)模式的Java实现[00原创]","articleAbstractText":"下面了例子来自《Java与模式》。假设有一个是用Java建造的电子杂志系统，定期地向用户的电子邮件信箱发送电子杂志。用户可以通过网页订阅，也可以通过网页结束订阅。当客户开始订阅时，系统发送一封电子邮件表示欢迎，当客户结束订阅时，系统发送一封电子邮件表示欢送。本例子就是这个系统负责发送欢迎和欢送邮件的模块。  类图  Java实现代码 packagecn.edu.ynu.sei.builder;importjava.util.Date;importjava.util.Properties;importjavax.mail.Session;importjavax.mail.Trans....","articleStatus":0,"articlePermalink":"/articles/2007/08/24/1187998740000.html","articleImg1URL":"https://img.hacpai.com/bing/20190204.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"再识 Java 的 final 关键字","articleAbstractText":"在 Java 中，我们一般用 final 关键字来定义类字段常量，防止类继承、方法覆写。但其实我们也应该尽可能地使用 final 关键字来修饰方法参数与局部变量。 因为这样做可以使代码更易读，能让阅读者清楚地知道该参数/变量是不会在被重赋值的，也可以让编译器更好地帮助我们优化生成的字节码。","articleStatus":0,"articlePermalink":"/java-final-keyword.html","articleImg1URL":"https://img.hacpai.com/bing/20180915.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"缺省适配器(Default Adapter)模式的Java实现[00原创]","articleAbstractText":"这个模式的原理非常的简单，请看下面的例子。  类图  Java实现代码 packagecn.edu.ynu.sei.defaultAdapter;接口Abr这个接口有5个方法，f1~f5@author88250@version1.0.0,2007-8-31publicinterfaceInterfaceA{publicvoidf1;publicvoidf2;publicvoidf3;publicvoidf4;publicvoidf5;} packagecn.edu.ynu.sei.defaultAdapter;**缺省的适配器角色br这个抽象类为code....","articleStatus":0,"articlePermalink":"/articles/2007/08/31/1188553440000.html","articleImg1URL":"https://img.hacpai.com/bing/20181217.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"多例(Multiton)模式的Java实现[00原创]","articleAbstractText":"本次实例以掷骰子的例子展开。  类图 Java实现代码  packagecn.edu.ynu.sei.multiton;*使用骰子的客户@author88250@version1.0.0,2007-8-19publicclassClient{privatestaticDiedie1,die2;**程序入口点@paramargs应该为codenullcode*publicstaticvoidmainString[]args{die1=Die.getInstance1;die2=Die.getInstance2;System.out.printlndie1.dice;....","articleStatus":0,"articlePermalink":"/articles/2007/08/19/1187561580000.html","articleImg1URL":"https://img.hacpai.com/bing/20180208.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"单例(Singleton)模式的Java实现[00原创]","articleAbstractText":"本次实例介绍了单例设计模式里最常见的两个实例饿汉单例与懒汉单例。  类图 Java实现代码  packagecn.edu.ynu.sei.singleton;*饿汉式的单例类@author88250@version1.0.0,2007-8-17publicclassEagerSingleton{*单一实例@uml.propertyname=instancereadOnly=trueprivatestaticfinalEagerSingletoninstance=newEagerSingleton;***私有的默认构造器privateEagerSingleto....","articleStatus":0,"articlePermalink":"/articles/2007/08/18/1187396280000.html","articleImg1URL":"https://img.hacpai.com/bing/20180117.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}