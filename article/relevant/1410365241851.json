{"relevantArticles":[{"articleTitle":"创业的第二个春天","articleAbstractText":"如果你是第一次看这个系列的文章，可从第一篇创业的第一个春天看起。 一年过去了，计划没有变化快，而变化就是没有变化。 暂停小圆桌项目 \u201c小圆桌\u201d是一款面向企业的 SaaS 社区服务，之前的计划是 6 月份上线。陆续开发了一些后，我们决定暂停继续开发了。暂停开发的主要原因是我们对预期市场的不确定，或者说缺乏信心。 为了验证市场，我们开始提供 Sym 商业版云服务。因为对于客户来说并不关心云服务是如何搭建运维的，客户只关心提供的服务效果。所以我们决定先提供 Sym 商业版云服务来验证市场，如果有一定数量的企业选择云服务版的社区，那就可以说明面向企业的 SaaS 社区是有市场的，那时候再重新启动小圆桌项目。 很多成功的商业是预先判断市场、超前时代的。可惜我没有那样的能力和实力，只能就眼目前的情况来做出一些短期选择。如果我和 V 还在上班而不是自己创业，小圆桌作为一个 side project 的话是绝对要去实现上线的，因为我觉得真的值得一试。 暂停对个人出售 Sym 商业版 之前 Sym 商业版是对个人出售的，并且价格仅是对企业售价的 5 折。直到上个月我发现了一件令我非常沮丧的事情，就是有.....","articleStatus":0,"articlePermalink":"/articles/2019/04/23/1555989598304.html","articleImg1URL":"https://img.hacpai.com/bing/20190406.jpg?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"理解 HTTPS 原理，SSL/TLS 协议","articleAbstractText":"###为什么要使用 HTTPS 当我们使用 HTTP 协议时，传输的数据是不安全的，因为所有在客户端和服务端往来的数据都是明文： * 第三方可以获取到真实数据 * 第三方可以篡改数据 * 第三方可以冒充服务端或客户端 为了解决这些问题，需要在 HTTP 协议中加入一个安全机制，由此并产生了 HTTPS，我们可以认为 HTTPS = HTTP + TLS/SSL。TLS/SSL 的引入解决了安全问题，而上层应用协议还是 HTTP。 ###历史 SSL（Secure Sockets Layer）中文称作\u201c安全套接层\u201d，TLS（Transport Layer Security），中文称作\u201c传输层安全协议\u201d。 1. 1994 年，网景（NetScape）公司设计了 SSL 1.0 2. 1995 年，SSL 2.0，存在严重漏洞 3. 1996 年，SSL 3.0，得到大规模应用 4. 1999 年，IETF 对 SSL 进行标准化，发布了 TLS 1.0 5. 2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.1 和 TLS 1.2 在应用层，我们习惯将两者并称 TL....","articleStatus":0,"articlePermalink":"/articles/2015/11/19/1447920990604.html","articleImg1URL":"https://img.hacpai.com/bing/20181104.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"模板引擎实现（一）词法分析","articleAbstractText":"如果你想实现模版引擎、编译器前端、文本解析器（比如 Markdown ）或想要了解它们的实现原理，请一定不要错过本系列的文章 :grin: 模板引擎实现（一）词法分析 另外，* 本系列的文章面向的是撸起袖子就开干的朋友，所以不会介绍基础理论，比如 DFA/NFA，算法复杂度等（确切的说是没法介绍理论，因为作者能力有限 :joy:）* 在使用到的术语/定义方面作者是认真查过资料并再三斟酌的，不会出现胡编乱造，请放心理解和使用 :white_check_mark:* 本系列文章的对应项目是 freemarker.go（FreeMarker 的 golang 实现），欢迎大家关注点赞 :star2: 本文介绍了词法分析的基本概念，主要参考 golang 的 text/template/parse 包源码进行解析。 词法分析 将面向源码的字符流转成 token 流的过程是词法分析。用\u201c流\u201d来描述主要说明了处理过程是有序和连续的。比如读取源码文件时是一个字符一个字符读取的，生成的 token 也是一个接一个的。 当我们在源码中看到 scanner、lex/le....","articleStatus":0,"articlePermalink":"/articles/2017/05/31/1496233258522.html","articleImg1URL":"https://img.hacpai.com/bing/20190214.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"你保存用户密码的姿势正确吗？","articleAbstractText":"这几年陆陆续续有很多大站被脱裤，最终导致了很多用户的密码明文泄露。本文不探讨脱裤技术，主要研究的是如何正确（尽量安全）地保存用户密码。","articleStatus":0,"articlePermalink":"/secure-salted-password-hashing","articleImg1URL":"https://img.hacpai.com/bing/20180313.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"创业的第二个夏天","articleAbstractText":"如果你是第一次看这个系列的文章，可从第一篇《创业的第一个春天》1 看起。 这个夏天我开始做一些自己一直想做的事情了。 星火 做一个真正意义上的社区，这是我最近几年来最想做的一件事，通过星火已经建立了雏形。想法、认知以及如何做尽皆分享于《写在星火初版发布之际》2。 目前星火暂时只作为一个 side project，以后时间多起来的话我会把更多精力放在上面。不必纠结于理想和现实之间的选择，相信只要足够努力就一定都能实现。 Lute 千呼万唤始出来，犹抱琵琶半遮面。转轴拨弦三两声，未成曲调先有情。 7 月份整整一个月基本都在闭关修炼 Markdown 程序员之道，这条道就是做一款实现《CommonMark 规范》3 的 Markdown 引擎。在第一次学用 Markdown 时就有此想法了，今年年初的时候终于付诸于实践，建立了项目仓库开始探索，但进展一直断断续续。 年初雄心壮志，年中饱受摧残，期间重写了一遍又一遍，最终还是靠抄官方的参考实现 4 做了一版，算是渡劫失败吧。其中的曲折后面会单独写一篇分享给那些正在准备渡劫飞升的道友，祝好运 ? （2019-11-17 更新：CommonM......","articleStatus":0,"articlePermalink":"/articles/2019/08/09/1565318802920.html","articleImg1URL":"https://img.hacpai.com/bing/20190711.jpg?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Go 边看边练 -《Go 学习笔记》系列（十四）（已完结）","articleAbstractText":"上一篇： [1438938175118] ---- ### ToC * Go 边看边练 -《Go 学习笔记》系列（一）- 变量、常量 * Go 边看边练 -《Go 学习笔记》系列（二）- 类型、字符串 * Go 边看边练 -《Go 学习笔记》系列（三）- 指针 * Go 边看边练 -《Go 学习笔记》系列（四）- 控制流1 * Go 边看边练 -《Go 学习笔记》系列（五）- 控制流2 * [Go 边看边练 -《Go 学习笔记》系列（六）- 函数](http://symphony.b3....","articleStatus":0,"articlePermalink":"/articles/2015/08/10/1439194647152.html","articleImg1URL":"https://img.hacpai.com/bing/20181207.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"创业的第二个秋天","articleAbstractText":"如果你是第一次看这个系列的文章，可从第一篇《创业的第一个春天》1 看起。 帮助别人成功，自己才有成功的机会。 Vditor &amp; Lute 这个秋天开始实现 Vditor 的\u201c所见即所得\u201d特性，即实现 Typora2 那样写 Markdown 时不用分屏预览，而是边写边渲染。不过 Markdown 本身的设计用意就是\u201c所见即所得\u201d，所以把这个特性叫做\u201c实时渲染\u201d更恰当一些。这个月应该能实现完，下个月正式发布。 技术方案上我们是通过让 Lute 支持渲染\u201cVditor DOM\u201d来实现。这个方案最难的部分莫过于实现源码映射3，即渲染结果字符和 Markdown 原文字符的位置对应关系。只有实现了源码映射才能实现编辑（光标）位置的正确移动。完整方案和技术细节后续会单独写一篇文档来介绍，希望能给其他在做 Markdown 编辑器的开发者带来帮助。 Latke Latke 是我们 Java 产品线的开发框架，之前的 Latke 是基于 Servlet 实现的，虽然能用但是一直不太满意： Servlet 有点重，很多特性用不上 性能不足够好 不同的 Servlet 容器有不同的部署细节，......","articleStatus":0,"articlePermalink":"/articles/2019/11/11/1573402018349.html","articleImg1URL":"https://img.hacpai.com/bing/20191024.jpg?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}